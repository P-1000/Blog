'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _lodash = require('lodash');

var _algoliasearch = require('algoliasearch');

var _algoliasearch2 = _interopRequireDefault(_algoliasearch);

var _algoliaMongooseModel = require('./algolia-mongoose-model');

var _algoliaMongooseModel2 = _interopRequireDefault(_algoliaMongooseModel);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const validateOpts = options => {
  const requiredKeys = ['appId', 'apiKey', 'indexName'];
  requiredKeys.forEach(key => {
    if (!options[key]) throw new Error(`Missing option key: ${key}`);
  });
};
/* eslint no-console: 0 */

const mongoolia = function mongoolia(schema, options) {
  validateOpts(options);

  // add new Algolia objectID field
  schema.add({
    _algoliaObjectID: { type: String, required: false, select: false }
  });

  // initialize Algolia client
  const appId = options.appId,
        apiKey = options.apiKey,
        indexName = options.indexName;

  const client = (0, _algoliasearch2.default)(appId, apiKey);
  const index = client.initIndex(indexName);

  // apply AlgoliaIndex class
  const attributesToIndex = (0, _lodash.reduce)(schema.obj, (results, val, key) => val.algoliaIndex ? [...results, key] : results, []);
  schema.loadClass((0, _algoliaMongooseModel2.default)({ index, attributesToIndex }));

  // register hooks
  schema.post('save', doc => doc.postSaveHook());
  schema.post('update', doc => doc.postUpdateHook());
  schema.post('remove', doc => doc.postRemoveHook());
};

exports.default = mongoolia;