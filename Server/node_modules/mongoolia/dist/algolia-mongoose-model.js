'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.default = createAlgoliaMongooseModel;

var _lodash = require('lodash');

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function createAlgoliaMongooseModel({
  index,
  attributesToIndex
}) {
  class AlgoliaMongooseModel {

    // * clears algolia index
    // * removes `_algoliaObjectID` from documents
    static clearAlgoliaIndex() {
      var _this = this;

      return _asyncToGenerator(function* () {
        yield index.clearIndex();
        yield _this.collection.update({ _algoliaObjectID: { $exists: true } }, { $set: { _algoliaObjectID: null } });
      })();
    }

    // * clears algolia index
    // * push collection to algolia index

    // properties comming from mongoose model after `.loadClass()`
    static syncWithAlgolia() {
      var _this2 = this;

      return _asyncToGenerator(function* () {
        yield _this2.clearAlgoliaIndex();

        const docs = yield _this2.find({ _algoliaObjectID: { $eq: null } });
        yield Promise.all(docs.map(function (doc) {
          return doc.pushToAlgolia();
        }));
      })();
    }

    // * set one or more settings of the algolia index
    static setAlgoliaIndexSettings(settings, forwardToReplicas) {
      return index.setSettings(settings, { forwardToReplicas });
    }

    // * search the index
    static algoliaSearch({
      query,
      params,
      populate
    }) {
      var _this3 = this;

      return _asyncToGenerator(function* () {
        const searchParams = _extends({}, params, { query });
        const data = yield index.search(searchParams);

        // * populate hits with content from mongodb
        if (populate) {
          // find objects into mongodb matching `objectID` from Algolia search
          const hitsFromMongoose = yield _this3.find({
            _algoliaObjectID: { $in: (0, _lodash.map)(data.hits, 'objectID') }
          }, (0, _lodash.reduce)(_this3.schema.obj, function (results, val, key) {
            return _extends({}, results, { [key]: 1 });
          }, { _algoliaObjectID: 1 }));

          // add additional data from mongodb into Algolia hits
          const populatedHits = data.hits.map(function (hit) {
            const ogHit = (0, _lodash.find)(hitsFromMongoose, {
              _algoliaObjectID: hit.objectID
            });

            return (0, _lodash.omit)(_extends({}, ogHit ? ogHit.toJSON() : {}, hit), ['_algoliaObjectID']);
          });

          data.hits = populatedHits;
        }

        return data;
      })();
    }

    // * push new document to algolia
    // * update document with `_algoliaObjectID`
    addObjectToAlgolia() {
      var _this4 = this;

      return _asyncToGenerator(function* () {
        const object = (0, _lodash.pick)(_this4.toJSON(), attributesToIndex);

        var _ref = yield index.addObject(object);

        const objectID = _ref.objectID;


        _this4.collection.update({ _id: _this4._id }, { $set: { _algoliaObjectID: objectID } });
      })();
    }

    // * update object into algolia index
    updateObjectToAlgolia() {
      var _this5 = this;

      return _asyncToGenerator(function* () {
        const object = (0, _lodash.pick)(_this5.toJSON(), attributesToIndex);
        yield index.saveObject(_extends({}, object, { objectID: _this5._algoliaObjectID }));
      })();
    }

    // * delete object from algolia index
    deleteObjectFromAlgolia() {
      var _this6 = this;

      return _asyncToGenerator(function* () {
        yield index.deleteObject(_this6._algoliaObjectID);
      })();
    }

    // * schema.post('save')
    postSaveHook() {
      if (this._algoliaObjectID) {
        this.updateObjectToAlgolia();
      } else {
        this.addObjectToAlgolia();
      }
    }

    // * schema.post('update')
    postUpdateHook() {
      if (this._algoliaObjectID) {
        this.updateObjectToAlgolia();
      }
    }

    // * schema.post('remove')
    postRemoveHook() {
      if (this._algoliaObjectID) {
        this.deleteObjectFromAlgolia();
      }
    }
  }

  return AlgoliaMongooseModel;
}